// Librería stdio.h
#include <stdio.h>

// pintf()
printf([String]) - Imprimir por pantalla

// scanf()
scanf([tipo_dato], &[variable]) - Escanear entrada por teclado

// FILE *
FILE *[variable_fichero] - Puntero tipo FILE 

//fscanf() - Lee un archivo
fscanf(FILE *[nombre_puntero], [tipo_dato], &[variable_buscar]);
ejemplo:
fscanf(fichero, "%d", &numero);

// fopen() - Abre el archivo de la ruta y modos indicados por parámetros
[variable_fichero] = fopen([ruta_fichero], [parametro_tipo_apertura]);
    r - Abre archivo existente para lectura.
    w - Abre existente para escritura sobreescribiendo contenido o lo crea vacío.
    a - Abre existente o crea para añadir datos al final.
    r+ - Abre archivo existente para leer y escribir.
    w+ - Crea archivo vacío para leer y escribir.
    a+ - Abre archivo para leer y escribir. Si no existe, se comporta como w+.

// fclose - Cierra el fichero al que apunta el puntero de archivo
fclose(FILE *[variable_fichero]);

// feof() - Función indica fin de archivo
int feof(FILE *[nombre_puntero]); - Devuelve 1 cuando llega a final de archivo o 0 si no

// fgetc() - Función para leer caracter a caracter del fichero
[variable_caracter] = fget(FILE *[nombre_puntero]);

// fputc() - Función para escribir caracter recibido por parámetro sobre el puntero de archivo
fputc([variable_caracter], [FILE *[nombre_puntero]]);

// fgets() - Almacena en un array la cantidad indicada de carácteres del archivo indicado
[variable_cadena2] = fgets([variable_cadena1], [variable_cantidad_caracteres], FILE *[nombre_puntero])

// fputs() - Escribe una cadena de carácteres pasada por parámetro en el puntero de archivo indicado
fputs([variable_cadena], FILE *[variable_fichero])

//fseek() - Mover el puntero de archivo a la posición indicada
fseek(FILE *[variable_fichero], [variable_posicion], [variable_origen]);
    SEEK_SET - Inicio del archivo
    SEEK_CUR - Posición actual
    SEEK_END - Final del archivo

// ftell() - Devuelve la posición actual del puntero de archivo
[variable_posicion] = ftell(FILE *[nombre_puntero]);



// strcat() - Concatenar pares de String
[variable_cadena] = strcat([string1], [string2])

// strstr() - Buscar una cadena dentro de otra
char *[puntero_coincidencia] = strstr([string1], [string2])
